<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>velocidad = 4;

KeyBlack = false;
KeyRed = false;
KeyGold = false;
Diamond = false;
GemGreen = false;
GemPurple = false;
GemBlue = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Movement

if (!place_meeting(x-velocidad,y,objWall))&amp;&amp;(!place_meeting(x-velocidad,y,objDoorFather))&amp;&amp;(!place_meeting(x-velocidad,y,objGoal))
    {
    if (keyboard_check(vk_left)){x = x-velocidad;}
    }

if (!place_meeting(x+velocidad,y,objWall))&amp;&amp;(!place_meeting(x+velocidad,y,objDoorFather))&amp;&amp;(!place_meeting(x+velocidad,y,objGoal))
    {
    if (keyboard_check(vk_right)){x = x+velocidad;}
    }
    
if (!place_meeting(x,y-velocidad,objWall))&amp;&amp;(!place_meeting(x,y-velocidad,objDoorFather))&amp;&amp;(!place_meeting(x,y-velocidad,objGoal))
    {
    if (keyboard_check(vk_up)){y = y-velocidad;}
    }

if (!place_meeting(x,y+velocidad,objWall))&amp;&amp;(!place_meeting(x,y+velocidad,objDoorFather))&amp;&amp;(!place_meeting(x,y+velocidad,objGoal))
    {
    if (keyboard_check(vk_down)){y = y+velocidad;}
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Key Management

/* 1)Se utilizar치 place_meeting para verificar la colisi칩n con alguna llave luego se
    destruye la llave  y se pone a true la variable respectiva en el objeto principal
    de llave. 2) se crea la variable keyColorInstance, para asegurar que el objPlayer
    deba colisionar con cada objKeyColor. 3)Para que el objDoorColor se destruya
    cuando se tengan todas las intancias verificar con intance_exists.
    */
    
var keyRedInstance = instance_place(x ,y , objKeyRed);    
if (keyRedInstance != noone)
    {
    with (keyRedInstance){instance_destroy();}
    if(!instance_exists(objKeyRed))
    {
        KeyRed = true;
    }
    audio_play_sound(sndDiamond, 10, false);
    }
    
var keyBlackInstance = instance_place(x ,y , objKeyBlack);    
if (keyBlackInstance != noone)
    {
    with (keyBlackInstance){instance_destroy();}
    if(!instance_exists(objKeyBlack))
    {
        KeyBlack = true;
    }
    audio_play_sound(sndDiamond, 10, false);
    }

var keyGoldInstance = instance_place(x ,y , objKeyGold);    
if (keyGoldInstance != noone)
    {
    with (keyGoldInstance){instance_destroy();}
    if(!instance_exists(objKeyGold))
    {
        KeyGold = true;
    }
    audio_play_sound(sndDiamond, 10, false);
    }
    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gems Management

if (place_meeting(x,y, objDiamond))
    {
    with(objDiamond){instance_destroy();}
    Diamond = true;
    audio_play_sound(sndDiamond, 10, false);
    }

if (place_meeting(x,y, objGemGreen))
    {
    with(objGemGreen){instance_destroy();}
    GemGreen = true;
    audio_play_sound(sndDiamond, 10, false);
    }
    
if (place_meeting(x,y, objGemPurple))
    {
    with(objGemPurple){instance_destroy();}
    GemPurple = true;
    audio_play_sound(sndDiamond, 10, false);
    }
    
if (place_meeting(x,y, objGemBlue))
    {
    with(objGemBlue){instance_destroy();}
    GemBlue = true;
    audio_play_sound(sndDiamond, 10, false);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Goal Management

if (Diamond &amp;&amp; GemPurple &amp;&amp; GemBlue &amp;&amp; GemGreen)
    {
    if(place_meeting(x+velocidad, y, objGoal))||
    (place_meeting(x-velocidad, y, objGoal))||
    (place_meeting(x, y-velocidad, objGoal))||
    (place_meeting(x, y+velocidad, objGoal))
        {
        with(objGoal){instance_destroy();}
        audio_play_sound(sndGoal, 10, false);
        if(!instance_exists(Diamond || GemPurple || GemBlue || GemGreen))
        {
        Goal = true;
        }
        if (room_exists(room_next(room)))
        {room_goto_next();}
        else
        {room_goto(Start);}
        }
     } 

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Door Management

/* En forma similar a las llaves se verificar치 el estado de la variable respectiva
    de la llave, la colisi칩n y luego de destruye la puerta.
    */
    
if (KeyRed)
    {
    if(place_meeting(x+velocidad, y, objDoorRed))||
    (place_meeting(x-velocidad, y, objDoorRed))||
    (place_meeting(x, y-velocidad, objDoorRed))||
    (place_meeting(x, y+velocidad, objDoorRed))
        {
        with(objDoorRed){instance_destroy();}
        audio_play_sound(sndDoor, 10, false);
        }
     }  
     
if (KeyBlack)
    {
    if(place_meeting(x+velocidad, y, objDoorBlack))||
    (place_meeting(x-velocidad, y, objDoorBlack))||
    (place_meeting(x, y-velocidad, objDoorBlack))||
    (place_meeting(x, y+velocidad, objDoorBlack))
        {
        with(objDoorBlack){instance_destroy();}
        audio_play_sound(sndDoor, 10, false);
        }
     }  
     
if (KeyGold)
    {
    if(place_meeting(x+velocidad, y, objDoorGold))||
    (place_meeting(x-velocidad, y, objDoorGold))||
    (place_meeting(x, y-velocidad, objDoorGold))||
    (place_meeting(x, y+velocidad, objDoorGold))
        {
        with(objDoorGold){instance_destroy();}
        audio_play_sound(sndDoor, 10, false);
        }
     } 
     

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objEnemyFather">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
audio_play_sound(sndDead, 10, false);
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objGoal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(sndGoal, 10, false);

if (room_exists(room_next(room)))
    {room_goto_next();}
    else
    {room_goto(Start);}
    
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
